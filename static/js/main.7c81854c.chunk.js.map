{"version":3,"sources":["components/Header.js","components/Shell.js","components/Board.js","shell-data.js","components/WinOrLose.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","Shell","props","rotation","flipped","style","transform","onClick","flipShell","symbol","Board","shellsOnBoard","nuts","map","nut","find","id","shells","WinOrLose","message","App","setState","state","findWinOrLose","length","resetGame","setTimeout","coconuts","sort","Math","random","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAaeA,EAXA,WACb,OACE,mCACE,oBAAIC,UAAU,QAAd,sBACA,sDACA,wDACA,sDCUSC,EAhBD,SAACC,GACb,IAAMC,EAAWD,EAAME,QAAU,IAAM,EACvC,OACE,sBACEJ,UAAU,QACVK,MAAO,CAACC,UAAU,WAAD,OAAaH,EAAb,SACjBI,QAAS,kBAAML,EAAMM,UAAUN,IAHjC,UAKE,qBAAKF,UAAU,gBACf,qBAAKA,UAAU,aAAf,SACE,mBAAGA,UAAU,QAAb,SAAsBE,EAAMO,eCKrBC,EAdD,SAACR,GACb,IAAMS,EAAgBT,EAAMU,KAAKC,KAAI,SAAAC,GACnC,OAAGZ,EAAME,QAAQW,MAAK,SAAAP,GAAS,OAAIA,EAAUQ,KAAOF,EAAIE,MAC/C,cAAC,EAAD,CAAOP,OAAQK,EAAIL,OAAqBO,GAAIF,EAAIE,GAAIZ,SAAS,EAAMI,UAAWN,EAAMM,WAApDM,EAAIE,IAEpC,cAAC,EAAD,CAAOP,OAAQK,EAAIL,OAAqBO,GAAIF,EAAIE,GAAIZ,SAAS,EAAOI,UAAWN,EAAMM,WAArDM,EAAIE,OAE/C,OACE,yBAAShB,UAAU,aAAnB,SACIW,KCAOM,EAZA,CACb,CAACD,GAAI,EACLZ,SAAS,EACTK,OAAQ,gBACR,CAACO,GAAI,EACLZ,SAAS,EACTK,OAAQ,gBACR,CAACO,GAAI,EACLZ,SAAS,EACTK,OAAQ,iBCCKS,G,OARG,SAAChB,GACjB,OACE,yBAASF,UAAU,WAAnB,SACE,mBAAGA,UAAU,wBAAb,SAAsCE,EAAMiB,cCmDnCC,G,yDA/Cb,aAAe,IAAD,8BACZ,gBAQFZ,UAAY,SAACM,GACX,EAAKO,SAAS,CACZjB,QAAQ,GAAD,mBAAM,EAAKkB,MAAMlB,SAAjB,CAA0BU,OAXvB,EAmBdS,cAAgB,WACgB,IAA9B,EAAKD,MAAMlB,QAAQoB,QAAgB,EAAKC,YACxC,EAAKH,MAAMlB,QAAQW,MAAK,SAAAD,GAAG,MAAmB,iBAAfA,EAAIL,WAAoB,EAAKgB,aArBhD,EAwBdA,UAAY,WACVC,YAAW,WACT,EAAKL,SAAS,CACdM,SAAUV,EAAOW,MAAK,kBAAMC,KAAKC,SAAW,MAC5C1B,QAAS,OAER,MA5BH,EAAKkB,MAAQ,CACXK,SAAUV,EAAOW,MAAK,kBAAMC,KAAKC,SAAW,MAC5C1B,QAAS,GACTe,QAAS,oBALC,E,sDAed,WACEY,KAAKR,kB,oBAiBP,WACE,OACE,0BAASvB,UAAU,MAAnB,UACE,cAAC,EAAD,IACC+B,KAAKT,MAAMlB,QAAQW,MAAK,SAAAD,GAAG,MAAmB,iBAAfA,EAAIL,WAAoB,cAAC,EAAD,CAAWU,QAAQ,gBAE3C,IAA9BY,KAAKT,MAAMlB,QAAQoB,SAAmBO,KAAKT,MAAMlB,QAAQW,MAAK,SAAAD,GAAG,MAAmB,iBAAfA,EAAIL,WAAqB,cAAC,EAAD,CAAWU,QAAQ,eAEnH,cAAC,EAAD,CAAOP,KAAMmB,KAAKT,MAAMK,SAAUvB,QAAS2B,KAAKT,MAAMlB,QAASI,UAAYuB,KAAKvB,mB,GA1CtEwB,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7c81854c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1 className=\"title\">Coconuts</h1>\n      <p>FIND THE ðŸ˜ƒ</p>\n      <p>BEWARE THE ðŸ’€</p>\n      <p>Choose a Coconut!</p>\n    </header>\n  )\n}\n\nexport default Header","import React from 'react';\n\nconst Shell = (props) => {\n  const rotation = props.flipped ? 180 : 0;\n  return (\n    <div \n      className=\"shell\"\n      style={{transform: `rotateY(${rotation}deg)`}} \n      onClick={() => props.flipShell(props)}\n      >\n      <div className=\"shell-front\"></div>\n      <div className=\"shell-back\">\n        <p className=\"pearl\">{props.symbol}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Shell","import React from 'react';\nimport Shell from './Shell'\n\nconst Board = (props) => {\n  const shellsOnBoard = props.nuts.map(nut => {\n    if(props.flipped.find(flipShell => flipShell.id === nut.id)) {\n      return <Shell symbol={nut.symbol} key={nut.id} id={nut.id} flipped={true} flipShell={props.flipShell}/>\n    }else{\n      return <Shell symbol={nut.symbol} key={nut.id} id={nut.id} flipped={false} flipShell={props.flipShell}/>\n    }})\n  return(\n    <article className=\"game-board\">\n      { shellsOnBoard }\n    </article>\n  )\n}\n\nexport default Board","const shells = [\n  {id: 1,\n  flipped: false,\n  symbol: \"ðŸ’€\"},\n  {id: 2,\n  flipped: false,\n  symbol: \"ðŸ˜ƒ\"},\n  {id: 3,\n  flipped: false,\n  symbol: \"ðŸ˜ƒ\"},\n]\n\nexport default shells","import React from 'react';\n\nconst WinOrLose = (props) => {\n  return (\n    <section className=\"win-lose\"> \n      <p className=\"win-lose-announcement\">{props.message}</p>\n    </section> \n  )\n}\n\nexport default WinOrLose","import React, { Component } from 'react';\nimport Header from './Header';\nimport Board from './Board'\nimport shells from '../shell-data'\nimport './App.css';\nimport WinOrLose from './WinOrLose'\nimport { render } from '@testing-library/react';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      coconuts: shells.sort(() => Math.random() - 0.5),\n      flipped: [],\n      message: \"Choose a Coconut\"\n    }\n  }\n\n  flipShell = (nut) => {\n    this.setState({\n      flipped: [...this.state.flipped, nut]\n    })\n  }\n\n  componentDidUpdate() {\n    this.findWinOrLose()\n  }\n\n  findWinOrLose = () => {\n    this.state.flipped.length === 2 && this.resetGame()\n    this.state.flipped.find(nut => nut.symbol === \"ðŸ’€\") && this.resetGame()\n  }\n\n  resetGame = () => {\n    setTimeout(() => {\n      this.setState({\n      coconuts: shells.sort(() => Math.random() - 0.5),\n      flipped: []\n      })\n    }, 2000)  \n  }\n  \n  render(){\n    return (\n      <section className=\"App\">\n        <Header />\n        {this.state.flipped.find(nut => nut.symbol === \"ðŸ’€\") && <WinOrLose message=\"YOU LOSE!!!\"/> }\n        \n        {(this.state.flipped.length === 2) && (!this.state.flipped.find(nut => nut.symbol === \"ðŸ’€\")) && <WinOrLose message=\"YOU WIN!!!\"/>}\n        \n        <Board nuts={this.state.coconuts} flipped={this.state.flipped} flipShell={ this.flipShell } />\n      </section>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}